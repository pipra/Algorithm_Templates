<snippet>
	<content><![CDATA[
const int maxN = 2e5 + 5;
const int LG = 20;
vector<int> g[maxN];
vector<int>under(maxN), dep(maxN), arr;
int parent[maxN][LG];
int pos, nchain;
int chainhead[maxN], chain_num[maxN], indx[maxN];
// chainhead = each chain head vertex store
// chain_num = a vertex in which chain stor
// indx = new indx of 1..N after converting tree to array
// under = how many subtree have on this node
// dep = depth from rootNode, -- rootNode = 1

void dfs(int u, int h){
    dep[u] = h;
    under[u] = 1;
    for (auto v : g[u]) {
        if (!dep[v]) {
            dfs(v, h + 1);
            parent[v][0] = u; // parent of node v = u
            under[u] += under[v];
        }
    }
}
void HLD(int u, int p){
    arr.push_back(u);
    chain_num[u] = nchain, indx[u] = pos++;
    int sc = -1, m = 0;
    for (auto v : g[u]) {
        if (v == p) continue;
        if (under[v] > m) {
            m = under[v], sc = v;
        }
    }
    if (sc == -1) return;
    HLD(sc, u);
    for (auto v : g[u]) {
        if (v == sc || v == p) continue;
        nchain++;
        chainhead[nchain] = v;
        HLD(v, u);
    }
}
void buildSparseTable(int n){
    for (int j = 1; j < LG; j++)
        for (int i = 1; i <= n; i++)
            if (parent[i][j - 1] != -1) {
                parent[i][j] = parent[parent[i][j - 1]][j - 1];
            }
}

int LCA(int u, int v){
    if (dep[u] > dep[v]) swap(u, v);
    int dist = dep[v] - dep[u];
    for (int i = LG - 1 ; i >= 0 ; i--)
        if (dist & (1 << i)) {
            v = parent[v][i];
        }
    if (u == v) return u;
    for (int i = LG - 1 ; i >= 0 ; i--) {
        if (parent[u][i] != parent[v][i]) {
            u = parent[u][i];
            v = parent[v][i];
        }
    }
    return parent[u][0];
}





// segment tree part of --sum
vector<int> seg;
int a[maxN];
int n;
void build(int ind, int b, int e){
    if (b == e) {
        seg[ind] = a[arr[b]];
        return;
    }
    int mid = (b + e) >> 1, l = ind << 1, r = l | 1;
    build(l, b, mid);
    build(r, mid + 1, e);
    seg[ind] = seg[l] + seg[r];
}
void update(int ind, int b, int e, int i, int x){
    if (b > i or e < i) return;
    if(b == e) {
        seg[ind] = x;
        return;
    }
    int mid = (b + e) >> 1, l = ind << 1, r = l | 1;
    update(l, b, mid, i, x);
    update(r, mid + 1, e, i, x);
    seg[ind] = seg[l] + seg[r];
}
int query(int ind, int b, int e, int i, int j){
    if (b > j or e < i) return 0;
    if (b >= i and e <= j) return seg[ind];
    int mid = (b + e) >> 1, l = ind << 1, r = l | 1;
    int L = query(l, b, mid, i, j);
    int R = query(r, mid + 1, e, i, j);
    return L + R;
}
// Tree Query
int query_Tree(int lca, int u){
    int res = 0;
    while (chain_num[lca] != chain_num[u]) {
        int t = chainhead[chain_num[u]];  // chainhead of node u
        res += query(1, 1, n, indx[t], indx[u]);
        u = parent[t][0];
    }
    res += query(1, 1, n, indx[lca], indx[u]);
    return res;
}

// all building part
void init(){
    dfs(1, 1); // rootNode = 1
    buildSparseTable(n); // sparte table build
    nchain = 1; pos = 1; //start chain = 1, first node position = 1
    chainhead[nchain] = 1; // rootNode chainhead = 1
    arr.clear(); // if test case have
    arr.push_back(0); // maintain 1 based index
    HLD(1, -1); // HLD called with root1
    seg.resize(4 * n);
    build(1, 1, n);
}
// n declare before
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>HLD</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
